version: 2.1
orbs:
  prodsec: snyk/prodsec-orb@1
  commitlint: conventional-changelog/commitlint@1.0.0
  go: circleci/go@1
  snyk: snyk/snyk@1

commands:
  install-helm:
    steps:
      - run:
          name: Install Helm
          command: |
            if command -v helm &> /dev/null; then
              echo "helm is already installed"
              exit 0
            fi
            curl "https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3" > get_helm.sh
            chmod 700 get_helm.sh
            ./get_helm.sh
  save-build-cache:
    steps:
      - save_cache:
          name: Saving Go build cache
          key: go-build-cache-{{ .Branch }}-{{ .Revision }}
          paths:
            - /home/circleci/.cache/go-build
  restore-build-cache:
    steps:
      - restore_cache:
          name: Restoring Go build cache
          keys:
            - go-build-cache-{{ .Branch }}-{{ .Revision }}
            - go-build-cache-{{ .Branch }}-
            - go-build-cache-

  build-docker-image:
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: build docker image
          command: make image
      - snyk/scan:
          docker-image-name: snyk/kubernetes-scanner:latest
          target-file: Dockerfile
          monitor-on-build: false
          fail-on-issues: true
          organization: snyk-apps

jobs:
  # All Snyk scanning jobs use a SNYK_TOKEN from the tiki-snyk Circle context,
  # which correponds to the tiki-snyk-circle-context service account in
  # https://app.snyk.io/org/cloud-cloud/manage/service-accounts
  # It's not in 1password, just rotate it and configure it in Circle directly if
  # needed.
  security_scans:
    resource_class: medium
    docker:
      - image: "cimg/go:1.21"
    steps:
      - checkout
      - prodsec/security_scans:
          mode: auto

  "Check licenses":
    resource_class: small
    executor:
      name: go/default
      tag: "1.21"
    steps:
      - checkout
      - run:
          command: |
            make generate-licenses
            git diff --quiet HEAD

  "Go test and lint":
    resource_class: medium
    executor:
      name: go/default
      tag: "1.21"
    steps:
      - checkout
      # saving & restoring the module cache takes almost 6x longer than simply fetching the modules...
      #- go/mod-download-cached
      - restore-build-cache
      - go/mod-download
      - run:
          command: |
            go mod tidy
            git diff --quiet HEAD
      - run:
          command: |
            golangci-lint run -v --timeout=2m ./...
          environment:
            # we re-use the Go build cache as our lint-cache too.
            GOLANGCI_LINT_CACHE: /home/circleci/.cache/go-build
      # we're not using the go/test command from the Go orb because that uses `-count=1` as an argument.
      # That means all tests are run every time, instead of honoring the cache.
      - run:
          command: |
            # install required tools for kubebuilder tests.
            go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest
            source <(setup-envtest use -p env) 
            go test -race ./...
      - save-build-cache

  "Smoke Test":
    resource_class: 2xlarge
    executor:
      name: go/default
      tag: "1.21"
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      # saving & restoring the module cache takes almost 6x longer than simply fetching the modules...
      #- go/mod-download-cached
      - restore-build-cache
      - go/mod-download
      - run:
          name: Install required tools
          command: |
            go install github.com/tilt-dev/ctlptl/cmd/ctlptl@latest
            go install sigs.k8s.io/kind@latest
            curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash
            curl -Lo $(go env GOPATH)/bin/kubectl "https://dl.k8s.io/release/v1.26.2/bin/linux/amd64/kubectl"
            chmod +x $(go env GOPATH)/bin/kubectl
      - install-helm
      - run:
          name: Spin up local k8s cluster
          command: ctlptl create cluster kind --registry=ctlptl-registry
      - run:
          command: |
            env TEST_SMOKE=true go test -v ./test
      - save-build-cache
  "Helm lint":
    resource_class: medium
    executor:
      name: go/default
      tag: "1.21"
    steps:
      - checkout
      - install-helm
      - run:
          command: |
            helm lint ./helm/*

  release:
    resource_class: medium
    docker: [image: "cimg/go:1.21"]
    steps:
      - checkout
      - build-docker-image
      - run:
          name: docker login
          command: |
            docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD}
      - run:
          name: push docker image
          command: make image-push
      - run:
          name: push helm chart
          command: make chart-push

  semantic-release:
    resource_class: small
    docker:
      - image: cimg/node:21.6.1
    steps:
      - checkout
      - run:
          name: Run semantic-release
          command: make release

workflows:
  "Test":
    jobs:
      - prodsec/secrets-scan:
          name: Scan repository for secrets
          context:
            - snyk-bot-slack
          channel: group-cloud-security-vulnerabilities-alerts
      - "Go test and lint":
          filters:
            branches:
              ignore: [main, gh-pages]
      - "Helm lint":
          filters:
            branches:
              ignore: [main, gh-pages]
      - "Check licenses":
          filters:
            branches:
              ignore: [main, gh-pages]
      - security_scans:
          name: Security Scans
          context: ["appsecex_integrations"]
      - commitlint/lint:
          name: Commit Lint
          filters:
            branches:
              ignore: [main, gh-pages]
          node-version: 18.20.1  # Should not be necessary once this orb is updated
      - "Smoke Test":
          filters:
            branches:
              ignore: [main, gh-pages]
          context:
            - tiki-smoke-tests-dev16
  "Release":
    jobs:
      - "Go test and lint":
          filters:
            branches:
              only: main

      - semantic-release:
          name: Semantic Release
          context:
            - tiki-kubernetes-scanner-release
          requires:
            - "Go test and lint"
          filters:
            branches:
              only: main

      - release:
          context:
            - snyk-docker-build
            - snyk-apps
            # There's two types of tokens in this, the Docker credentials
            # (username & password) and a Github PAT. Both are stored in
            # 1Password ("DockerHub TIKI kubernetes-scanner" and "Github TIKI
            # kubernetes-scanner"). The Github PAT will expire on March 27, 2024
            # and will need to be rotated by logging in with the "snyk-deployer"
            # account in Github. Do not forget to "Authorize SSO" on the new
            # token. The same goes for the docker credentials, where you'll
            # need to login with "snykdocker"
            #
            # The Github Token is used to push commits & the Helm chart to the
            # Github release. The Docker token to publish the Docker image.
            - tiki-kubernetes-scanner-release
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
