version: 2.1
orbs:
  commitlint: conventional-changelog/commitlint@1.0.0
  go: circleci/go@1
  snyk: snyk/snyk@1

commands:
  gcr_auth:
    description: Auth GCR
    steps:
      - run:
          name: GCR auth
          command: echo $GCLOUD_GCR_BUILDER | docker login -u _json_key --password-stdin https://gcr.io/snyk-main
  save-build-cache:
    steps:
      - save_cache:
          name: Saving Go build cache
          key: go-build-cache-{{ .Branch }}-{{ .Revision }}
          paths:
            - /home/circleci/.cache/go-build
  restore-build-cache:
    steps:
      - restore_cache:
          name: Restoring Go build cache
          keys:
            - go-build-cache-{{ .Branch }}-{{ .Revision }}
            - go-build-cache-{{ .Branch }}-
            - go-build-cache-

  build-docker-image:
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: build docker image
          command: make image
      - snyk/scan:
          docker-image-name: gcr.io/snyk-main/kubernetes-scanner:latest
          target-file: Dockerfile
          monitor-on-build: false
          fail-on-issues: true
          organization: snyk-apps

jobs:
  "Snyk scan":
    resource_class: small
    docker:
      - image: "cimg/go:1.20"
    steps:
      - checkout
      - snyk/scan:
          fail-on-issues: true
          monitor-on-build: false # ?
          organization: snyk-apps

  "Go test and lint":
    resource_class: medium
    executor:
      name: go/default
      tag: "1.20"
    steps:
      - checkout
      # saving & restoring the module cache takes almost 6x longer than simply fetching the modules...
      #- go/mod-download-cached
      - restore-build-cache
      - go/mod-download
      - run:
          command: |
            go mod tidy
            git diff --quiet HEAD
      - run:
          command: |
            golangci-lint run -v --timeout=2m ./...
          environment:
            # we re-use the Go build cache as our lint-cache too.
            GOLANGCI_LINT_CACHE: /home/circleci/.cache/go-build
      # we're not using the go/test command from the Go orb because that uses `-count=1` as an argument.
      # That means all tests are run every time, instead of honoring the cache.
      - run:
          command: |
            # install required tools for kubebuilder tests.
            go install sigs.k8s.io/controller-runtime/tools/setup-envtest@latest
            source <(setup-envtest use -p env) 
            go test -race ./...
      - save-build-cache
  "Helm lint":
    resource_class: medium
    executor:
      name: go/default
      tag: "1.20"
    steps:
      - checkout
      - run:
          name: Install Helm
          command: |
            if command -v helm &> /dev/null; then
              echo "helm is already installed"
              exit 0
            fi
            curl "https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3" > get_helm.sh
            chmod 700 get_helm.sh
            ./get_helm.sh
      - run:
          command: |
            helm lint ./helm/*

  release:
    resource_class: medium
    docker: [image: "cimg/go:1.20"]
    steps:
      - checkout
      - gcr_auth
      - build-docker-image
      # TODO: enable once we want to push images to dockerhub. Also add the required env vars
      # DOCKERHUB_USER and DOCKERHUB_PASSWORD to the project...probably through a context?
      # Also remove the gcr_auth step above.
      #- run:
      #name: docker login
      #command: |
      #docker login --username ${DOCKERHUB_USER} --password ${DOCKERHUB_PASSWORD}
      - run:
          name: push docker image
          command: make image-push
      - run:
          name: push helm chart
          command: make helm-push

  semantic-release:
    resource_class: small
    docker:
      - image: cimg/node:18.15
    steps:
      - checkout
      - run:
          name: Run semantic-release
          command: make release

workflows:
  "Test":
    jobs:
      - "Go test and lint":
          filters:
            branches:
              ignore: [main, gh-pages]
      - "Helm lint":
          filters:
            branches:
              ignore: [main, gh-pages]
      - "Snyk scan":
          context: ["snyk-apps"]
          filters:
            branches:
              ignore: [main, gh-pages]
      - commitlint/lint:
          name: Commit Lint
          filters:
            branches:
              ignore: [main, gh-pages]
  "Release":
    jobs:
      - "Go test and lint":
          filters:
            branches:
              only: main

      - semantic-release:
          name: Semantic Release
          context:
            - nodejs-app-release
          requires:
            - "Go test and lint"
          filters:
            branches:
              only: main

      - release:
          context:
            - snyk-docker-build
            - snyk-apps
            # This context contains a Personal Access Token from the snyk-deployer account.
            # It's used to push commits & the Helm chart to the Github release. It is named
            # "kubernetes-scanner Helm release CI" and will expire on Jan 06, 2024.
            # To regenerate a token, login with the snyk-deployer account, create a token
            # and add it / update the context.
            - kubernetes-scanner-helm-release
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
