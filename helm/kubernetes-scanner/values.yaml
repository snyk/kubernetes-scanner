#
# Â© 2023 Snyk Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Default values for kubernetes-scanner.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

enabled: true

config:
  # MANDATORY: clusterName is a friendly name for the cluster that this agent is
  # running on. For example "prod-us" or "dev-eu".
  # If installing scanners to multiple clusters, please configure a different
  # cluster name for each cluster. These do not need to be globally unique, as
  # they are scoped by organization, but using clashing cluster names within an
  # organization may make it difficult for users to associate issues with specific
  # clusters later.
  #
  # clusterName: "default"

  # MANDATORY: set routes
  # Routes define which resources should be sent to which organizations.
  # It is required to provide at least one valid route to agent to be able to start
  # When using organization level service accounts, service account is authorized
  # to route data only for the organization it is created in.
  # When using group level service accounts, service account can route data to
  # all organizations under the created group.
  # This allows having a single installation of the kubernetes-scanner in a
  # cluster used by multiple organizations.
  #
  # Each route contains
  # * organizationID: Target organizationID for the resources
  # * clusterScopedResources: true if cluster resources should be routed for this organization
  # * namespaces: a list of namespaces. If * wildcard is used,
  # resources from all namespaces will be routed to organization
  #
  # An example routing configuration which will route
  # * All cluster resources and resources from all namespaces
  # to organization aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaaa
  # * All resources from test-cluster-f and prod-cluster-f namespaces
  # to organization ffffffff-ffff-ffff-ffff-fffffffffffff
  #
  # routes:
  #  - organizationID: "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaaa"
  #    clusterScopedResources: true
  #    namespaces:
  #      - "*"
  #  - organizationID: "ffffffff-ffff-ffff-ffff-fffffffffffff"
  #    clusterScopedResources: false
  #    namespaces:
  #      - "test-cluster-f"
  #      - "prod-cluster-f"
  routes:
  scanning:
    # define all types that will be scanned on your cluster. This part will be
    # used to generate the config for the scanner, as well as the RBAC
    # ClusterRole for it.
    # The scanner will combine all apiGroups x resources, and will scan for all
    # existing combinations. If a combination should not exist, it will be
    # skipped.
    # The types configuration is similar to an RBAC `Role` definition, but
    # includes some additional fields.
    types:
      # A list of APIGroups where the below resources are in.
      - apiGroups: [""]
        # a list of API versions that should be scanned. If unset, the
        # APIServer's "preferredVersion" will be used. Can also specify
        # multiple to scan for multiple versions at once.
        versions: ["*"]
        # a list of resource types to scan.
        resources:
          - pods
          - services
          - namespaces
          - replicationcontrollers
          - nodes
          - configmaps
        # Omit the namespaces array to scan resources from all available
        # namespaces. This configuration also includes non-namespaced resources,
        # e.g. ClusterRoles.
        # Declare an empty list to _only_ scan non-namespaced resources.
        # namespaces: ["default"]
        #
        # Optionally configure fields to be removed.
        # These paths are dot-separated address for nested values, in the same
        # format as arguments to `kubectl explain`.
        # For example, the expression "spec.containers.env" will cause
        # Kubernetes Pod container environment variables to be removed.
        # "containers" is an array, and each element of this array is
        # redacted in this way.
        #
        # attributeRemovals:
        #   - "spec.containers.env"
        #   - "metadata.managedFields"
      - apiGroups: ["rbac.authorization.k8s.io"]
        versions: ["*"]
        resources:
          - clusterroles
          - roles
          - clusterrolebindings
          - rolebindings
      - apiGroups: ["batch"]
        versions: ["*"]
        resources:
          - cronjobs
          - jobs
      - apiGroups: ["apps"]
        versions: ["*"]
        resources:
          - replicasets
          - daemonsets
          - deployments
          - statefulsets
        # More example attributeRemovals. See above for explanation.
        # attributeRemovals:
        #   - "spec.template.spec.containers.env"
        #   - "metadata.managedFields"
      - apiGroups: ["networking.k8s.io"]
        versions: ["*"]
        resources:
          - ingresses
      - apiGroups: ["apps.openshift.io"]
        versions: ["*"]
        resources:
          - deploymentconfigs
      - apiGroups: ["argoproj.io"]
        versions: ["*"]
        resources:
          - rollouts
      - apiGroups: ["gateway.solo.io"]
        versions: ["*"]
        resources:
          - gateways
          - httpgateways
          - routeoptions
          - routetables
          - virtualhostoptions
          - virtualservices
      - apiGroups: ["getambassador.io"]
        versions: ["*"]
        resources:
          - consulresolvers
          - devportals
          - hosts
          - kubernetesendpointresolvers
          - kubernetesserviceresolvers
          - listeners
          - logservices
          - mappings
          - modules
          - ratelimitservices
          - tcpmappings
          - tracingservices
      - apiGroups: ["gloo.solo.io"]
        versions: ["*"]
        resources:
          - proxies
          - upstreamgroups
          - upstreams
      - apiGroups: ["graphql.gloo.solo.io"]
        versions: ["*"]
        resources:
          - graphqlschemas
      - apiGroups: ["install.istio.io"]
        versions: ["*"]
        resources:
          - istiooperators
      - apiGroups: ["networking.gke.io"]
        versions: ["*"]
        resources:
          - managedcertificates
          - serviceattachments
          - frontendconfigs
          - servicenetworkendpointgroups
      - apiGroups: ["networking.istio.io"]
        versions: ["*"]
        resources:
          - destinationrules
          - envoyfilters
          - gateways
          - serviceentries
          - sidecars
          - virtualservices
          - workloadentries
          - workloadgroups
      - apiGroups: ["ratelimit.solo.io"]
        versions: ["*"]
        resources:
          - ratelimitconfigs
      - apiGroups: ["security.istio.io"]
        versions: ["*"]
        resources:
          - authorizationpolicies
          - peerauthentications
          - requestauthentications
    requeueAfter: "6h"
  egress:
    httpClientTimeout: "5s"
    snykAPIBaseURL: "https://api.snyk.io"
  # Optionally, you can set the logging level for the scanner.  Supported
  # values include: `error`, `warn`, `info`, `debug`.  If not specified,
  # defaults to `info`.
  # logging:
  #   level: info

# MANDATORY: The name of a secret containing auth credentials, which must be
# provisioned outside of this chart.
#
# Requires a key "snykServiceAccountToken". You can find more information on
# Snyk service accounts at https://docs.snyk.io/snyk-admin/service-accounts.
# The service account must be associated with the organizationID configured
# above.
#
# The service account must have one of the following roles:
# - Org Admin
# - Group Admin
# - Custom Role with "Publish Kubernetes Resources" permission
#
# secretName: ""

image:
  repository: snyk/kubernetes-scanner
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Optionally supply extra environment variables to the scanner container. Schema
# is identical to Pod.spec.containers.env. An example is below.
#
# extraEnv:
#   - name: HTTPS_PROXY
#     value: "a-proxy:3128"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

healthCheck:
  port: 8081

metrics:
  # set to 0 to disable.
  port: 8080

resources:
  {}
  # Example resources:
  #
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

prometheus:
  podMonitor:
    enabled: false
    labels: {}
